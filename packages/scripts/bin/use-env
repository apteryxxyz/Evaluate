#!/usr/bin/env node

/**
 * Loads env vars from .env files and runs a command with those vars.
 * - Supports production mode with `--prod`
 * - Adds optional prefixes to PUBLIC_ variables
 * - Usage: use-env [options] <command...>
 */

import { dirname, join, resolve } from 'node:path';
import nextEnv from '@next/env';
const { loadEnvConfig } = nextEnv;
import { fileURLToPath } from 'node:url';
import { createCommand } from 'commander';
import { spawn } from 'cross-spawn';
import { colours, logger } from './_logger.js';

// ===== //

const program = createCommand('use-env')
  .option(
    '-p, --public-prefix [prefix]',
    'Append a prefix to each public variable',
  )
  .option(
    '-P, --prod',
    'Load production environment',
    process.env.NODE_ENV === 'production',
  )
  .argument('<command...>', 'The command to run')
  .parse(reorderProcessArguments(process.argv));

const publicPrefix = program.opts().publicPrefix ?? '';
const isProduction = program.opts().prod;
const commandToRun = program.args.map((a) => `"${a}"`).join(' ');
const rootDir = await getRootDirectory();
const targetDirectory = resolve(rootDir, '.env');

const { loadedEnvFiles } = loadEnvironmentVariables(
  targetDirectory,
  isProduction,
);

const loadedFrom = loadedEnvFiles.map((f) => f.path).join(' ');
if (loadedFrom) logger.info(`Environment: ${colours.italic(loadedFrom)}`);
else logger.info('No Environment');
process.env['>_'] = true;

const child = spawn(commandToRun, {
  stdio: 'inherit',
  shell: process.env.SHELL || '/bin/bash',
  env: process.env,
});
child.on('exit', process.exit);

// ===== //

async function getRootDirectory() {
  const cd = dirname(fileURLToPath(import.meta.url));
  return join(cd, '../../..');
}

function reorderProcessArguments(argv) {
  const argvCopy = [...argv];
  const separatorCount = argvCopy.filter((a) => a === '--').length;
  if (separatorCount === 2) {
    const firstIndex = argvCopy.indexOf('--');
    const secondIndex = argvCopy.indexOf('--', firstIndex + 1);
    const secondGroup = argvCopy.splice(secondIndex + 1);
    argvCopy.splice(firstIndex, 0, ...secondGroup);
  }
  return argv;
}

function loadEnvironmentVariables(targetDirectory, isProduction) {
  const { loadedEnvFiles } = loadEnvConfig(targetDirectory, !isProduction);

  for (const key in process.env) {
    if (key.startsWith('PUBLIC_')) {
      process.env[key.slice(7)] = process.env[key];
      if (publicPrefix) {
        process.env[`${publicPrefix}_${key}`] = process.env[key];
        delete process.env[key];
      }
    }
  }

  return { loadedEnvFiles };
}
